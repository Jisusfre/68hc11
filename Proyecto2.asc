* PROYECTO 2

*DECLARACION CONSTANTES

SCDR   EQU   $102F
SCCR2  EQU   $102D
SCSR   EQU   $102E
SCCR1  EQU   $102C
BAUD   EQU   $102B
HPRIO  EQU   $103C
SPCR   EQU   $1028
CSCTL  EQU   $105D
OPT2   EQU   $1038
DDRD   EQU   $1009

*DECLARACION DE VARIABLES
ORDEN EQU $0000
M   EQU $0016  *BANDERA DE LETRAS M
D   EQU $0017  *BANDERA DE LETRA D
C   EQU $0018  *BANDERA DE LETRA C
L   EQU $0019  *BANDERA DE LETRA L
XB   EQU $0020  *BANDERA DE LETRA X
V   EQU $0021  *BANDERA DE LETRA U
I   EQU $0022  *BANDERA DE LETRA I
O   EQU $0023  *BANDERA DEL OK
A	EQU $0001  *BANDERA FIN DE CADENA
BERROR EQU $0002   * BANDERA DE ERROR
UNIDAD EQU $0053   * DIRECCION PARA ESCRIBIR UNIDADES
DECENA EQU $0052   * DIRECCION PARA ESCRIBIR DECENAS
CENTENA EQU $0051  * DIRECCION PARA ESCRIBIR CENTENA
MIL EQU $0050      * DIRECCION PARA ESCRIBIR UNIDADES DE MILLAR

    ** ESPACIO PARA LAS CADENAS A MOSTRAR
		ORG $3000
		FCC "ERROR, NUMERO ROMANO INVALIDO."   *29 CARACTERES
		FCC "ERROR, NUMERO ARABIGO INVALIDO."  *30
		FCC "ERROR, NUMERO FUERA DE RANGO."    *28
		
		FCC "uno  "
		FCC "dos "
		FCC	"tres "
		FCC	"cuatro "
		FCC	"cinco "
		FCC	"seis "
		FCC	"siete "
		FCC	"ocho "
		FCC	"nueve "
		FCC "dieci "
		FCC	"diez "
		FCC "once "
		FCC "doce "
		FCC "trece "
		FCC "catorce "
		FCC "quince "
		FCC "diecisEis "
		FCC "veinte "
		FCC "veinti "
		FCC "ventisEis "
		FCC "y "
		FCC "treinta "
		FCC "cuarenta "
		FCC "cincuenta "
		FCC "sesenta "
		FCC "setenta "
		FCC "ochenta "
		FCC "noventa "
		FCC "cien "
		FCC "ciento "
		FCC "cientos "
		FCC "quinientos "
		FCC "setecientos "
  		FCC "novecientos "
		FCC "mil "
		
		ORG $8000
INICIO
		LDS #$00FF 		* Configuracion del puerto serial
		JSR SERIAL 		* SUBRUTINA PARA CONFIG EL PUERTO SERIAL
		JSR LIMPIEZA

CICLATE
		LDAA	#'?
		STAA	ORDEN
CICLO
		LDAA	ORDEN
		CMPA	#'?
		BEQ	CICLO
        
        CMPA #'M
        BEQ CASOM
        CMPA #'D
        BEQ CASOD
        JMP SALTOINTERMEDIO1


ERROR1
		JSR ERROR_ESCRITURA
		JMP FIN

CASOM	
		LDAB C			*Verifica que le haya llegado una C ANTES para el caso de CM
      	CMPB #0
      	BNE CASOM1
		LDAB M
		CMPB #8         *Verifica que no sean más de 9 M's 
		BHI ERROR1

		JSR D_ERROR

		STAA $00,X  	*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX
      	LDAB M
      	INCB 
      	STAB M		 
      	LDAB MIL
      	INCB 
      	STAB MIL
      	JMP CICLATE

*CASO DONDE LLEGUE CM
CASOM1                  
		CMPB #1         *Compara si hay una segunda C
		BHI ERROR1 
		ADDB #5         
		STAB C          *Carga en C el valor de 5           
		LDAB #9         
      	STAB CENTENA    *Carga en las centenas el valor de 9
		STAA $00,X  	*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX             *Aumenta la X en 1
      	JMP CICLATE     *Regresa a esperar

CASOD
		
		JSR D_ERROR
		LDAB D
      	INCB 
      	STAB D
		CMPB #2
		BEQ ERROR1 					*VALIDA QUE NO LLEGUEN 2 O MÁS D's
		STAA $00,X 					*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX
      	LDAB C
      	CMPB #0
      	BNE CASOD1
      	LDAB #5
      	STAB CENTENA
      	JMP CICLATE
CASOD1  
***** CASO CD
		CMPB #1         
		BHI ERROR_1     *Compara si hay más de una C
		ADDB #5                   
		STAB C          *Carga en C el valor de 5, ¿porque? ####
		LDAB #4         
      	STAB CENTENA    *Carga en las centenas el valor de 4
		STAA $00,X  	*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX             *Aumenta la X en 1
      	JMP CICLATE     *Regresa a esperar


SALTOINTERMEDIO1
		CMPA #'C
        BEQ CASOC
		CMPA #'L
        BEQ CASOL
		JMP SALTOINTERMEDIO

*C ES UNA BANDERA A FUTURO PARA ERRORES
CASOC
		LDAB XB							*VERIFICA QUE LLEGUE UN XC
		CMPB #0
		BNE CASOC1
		LDAB C
		CMPB #4
		BHI ERROR_1
		
		JSR L_ERROR

		LDAB C
     	INCB 
      	STAB C
		CMPB #4			
		BEQ ERROR_1		*VALIDA QUE NO LLEGUEN 4 O MÁS C's
		STAA $00,X						*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX
		LDAB CENTENA
     	INCB 
      	STAB CENTENA
      	JMP CICLATE

*CASO POR SI LLEGA UN XC
CASOC1
		CMPB #1                   
		BHI ERROR_1  * SI ES HAY MÁS DE UNA C ES ERROR
		ADDB #5          *PARA FUTURO ERROR XCX
		STAB XB
		LDAB #9
		STAB DECENA
		STAA $00,X  	*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX
		JMP CICLATE

ERROR_1
		JSR ERROR_ESCRITURA
		JMP FIN

CASOL
		JSR V_ERROR
		LDAB L
      	INCB 
      	STAB L
		CMPB #2			
		BEQ ERROR_1		*VALIDA QUE NO LLEGUEN 2 O MÁS L's
		STAA $00,X						*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX
		LDAB XB
		CMPB #0
		BNE CASOL1
		LDAB #5
      	STAB DECENA
		
      	JMP CICLATE

*PARA CUANDO LLEGA XL
CASOL1
		CMPB #1         
		BHI ERROR_1     *Compara si hay más de una X
		ADDB #5                   
		STAB XB          *Suma en X el valor de 5, ¿porque? ####
		LDAB #4         
      	STAB DECENA     *Carga en las centenas el valor de 4
		STAA $00,X  	*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX             *Siguiente Direccion de escritura
      	JMP CICLATE     *Regresa a esperar

                          **********SALTO INTERMEDIO
SALTOINTERMEDIO
		CMPA #'X
        BEQ CASOX
        CMPA #'V
        BEQ CASOV
        CMPA #'I
        BEQ CASOI

		JMP SALTOINTERMEDIO2

CASOX
		JSR V_ERROR
		LDAB I
		CMPB #0			*VALIDA EL CASO IX
		BNE CASOX1
		LDAB XB
      	INCB 
      	STAB XB
		CMPB #3
		BHI ERROR_1
		LDAB V
		CMPB #0			*VALIDA QUE NO HAYA V's ANTES DE LA X 
		BNE ERROR_1
		

		STAA $00,X			*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX
		LDAB DECENA
		INCB
		STAB DECENA
      	JMP CICLATE

ERROR_2
		JSR ERROR_ESCRITURA
		JMP FIN
*CUANDO LLEGUE UN IX	
CASOX1
		CMPB #1
		BHI ERROR_1
		ADDB #6
		STAB I
		LDAB #9
		STAB UNIDAD
		STAA $00,X  	*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX
		JMP CICLATE

CASOV
		LDAB I
		CMPB #0
		BNE CASOV1
		LDAB V
		INCB 
		STAB V
		CMPB #2
		BEQ ERROR_2		*VALIDA QUE NO LLEGUEN 2 O MÁS V's	_2
		STAA $00,X						*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX
		LDAB #5
		STAB UNIDAD
		JMP CICLATE

*CUANDO LLEGUE UN IV
CASOV1 
		CMPB #1
		BHI ERROR_2
		ADDB #6
		STAB I
		LDAB #4
		STAB UNIDAD
		STAA $00,X  	*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX
		JMP CICLATE

SALTOINTERMEDIO2
        CMPA #'O  *CASO EN QUE RECIBA OK
        BEQ CASOO
        CMPA #'K
        BEQ CASOOK
		CMPA #61            *Valida que le llegue un = para saber que es fin de la cadena que mete el usuario
		BEQ ESCRIBECHAR
		JMP SALTOINTERMEDIO1_ERROR

CASOI
		
		LDAB I
		INCB 
		STAB I
		CMPB #3
		BHI ERROR_2
		STAA $00,X						*Escribir a partir de la memoria $70 lo que le mande el usuario
		INX
		LDAB UNIDAD
		INCB
		STAB UNIDAD
		JMP CICLATE

CASOO
		LDAB O
		INCB
		STAB O
		JMP FIN

CASOOK
		LDAB O
		CMPB #0
		BNE LIMPIEZA_SALTO
		JMP CICLATE
LIMPIEZA_SALTO
		JSR LIMPIEZA
		JMP CICLATE

SALTOINTERMEDIO1_ERROR
		JMP ERROR1

ESCRIBECHAR
		LDAB BERROR
		CMPB #1
		BEQ SALTOINTERMEDIO1_ERROR
		LDAB #48  * Es el ascii de 0 en decimal 
		LDAA MIL
		ABA
		STAA MIL
		LDAA CENTENA
		ABA
		STAA CENTENA
		LDAA DECENA
		ABA
		STAA DECENA
		LDAA UNIDAD
		ABA
		STAA UNIDAD
		JMP FIN

FIN 
		LDAA	#'?
		STAA	ORDEN
CICLO1
		LDAA	ORDEN
		CMPA	#'?

		BEQ	CICLO1
		CMPA #'O
		BEQ CASOO
		CMPA #'K
		BEQ CASOOK
		JMP FIN

*Configuracion del puerto serial
SERIAL 
       	LDD   #$302C  * CONFIGURA PUERTO SERIAL
       	STAA  BAUD    * BAUD  9600  para cristal de 8MHz
       	STAB  SCCR2   * HABILITA  RX Y TX PERO INTERRUPCN SOLO RX
       	LDAA  #$00
       	STAA  SCCR1   * 8 BITS

	    LDAA  #$FE    * CONFIG PUERTO D COMO SALIDAS (EXCEPTO PD0)
    	STAA  DDRD    * SEA  ENABLE DEL DISPLAY  PD4  Y RS PD3
                     
      
        LDAA  #$04
       	STAA  HPRIO

	 	LDAA  #$00
     	TAP
      	RTS

ERROR_ESCRITURA
		LDAB BERROR
		INCB 
		STAB BERROR
		LDX #$0050     * DIRECCION DEL MENSAJE
		LDY #$3000     * ORG DE LOS FCC
ERROR_CICLO
		LDAB $00,Y		
		STAB $00,X
		INX 
		INY
		CMPB #46        * ASCII DE PUNTO
		BNE ERROR_CICLO
		RTS


ERROR_SALTO
		JSR ERROR_ESCRITURA
		JMP FIN_ERROR

D_ERROR 
		LDAB D
		CMPB #0			*VALIDA QUE NO HAYA D's ANTES DE LA M 
		BNE ERROR_SALTO
		
		CMPA #'M
		BEQ L_ERROR		* VALIDAR QUE M SI PUEDE TENER UNA C ANTES
C_ERROR
		LDAB C
		CMPB #0			*VALIDA QUE NO HAYA D's ANTES DE LA M 
		BNE ERROR_SALTO
L_ERROR
		LDAB L
		CMPB #0			*VALIDA QUE NO HAYA L's ANTES DE LA M 
		BNE ERROR_SALTO
		CMPA #'C
		BEQ V_ERROR		* VALIDAR QUE C SI PUEDE TENER UNA X ANTES
X_ERROR
		LDAB XB
		CMPB #0			*VALIDA QUE NO HAYA X's ANTES DE LA M 
		BNE ERROR_SALTO
V_ERROR
		LDAB V
		CMPB #0			*VALIDA QUE NO HAYA V's ANTES DE LA M 
		BNE ERROR_SALTO
		CMPA #'X
		BEQ FIN_ERROR		* VALIDAR QUE X SI PUEDE TENER UNA I ANTES
I_ERROR
		LDAB I
		CMPB #0			*VALIDA QUE NO HAYA I's ANTES DE LA M 
		BNE ERROR_SALTO
FIN_ERROR
		RTS

LIMPIEZA
	CLR M
	CLR D
	CLR C
	CLR L 
	CLR XB
	CLR V
	CLR I
	CLR A
	CLR BERROR
	CLR UNIDAD
	CLR DECENA
	CLR CENTENA
	CLR MIL
	LDX #$0070
	LDY #$0070
LIM
	LDAA #00
	STAA $00,Y
	INY
	CPY #$008F
	BNE LIM
	LDY #$0050
LIM2
	LDAA #00
	STAA $00,Y
	INY
	CPY #$0070
	BNE LIM2
	RTS

***********************************
* ATENCION A INTERRUPCION SERIAL
***********************************
	ORG	$F100
	LDAA	SCSR
	LDAA	SCDR
	STAA	ORDEN 
	RTI

***********************************
* VECTOR INTERRUPCION SERIAL
***********************************
	ORG	$FFD6
	FCB	$F1,$00       


***********************************
*RESET
***********************************
	ORG	$FFFE
RESET	FCB	$80,$00
***********************************

	END	$8000